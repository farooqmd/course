Time-stamp: <2013-02-18 22:13 olenz>

Day 1
-----
LECTURE: Procedural C/C++ 1
* History of C++
* Fundamental syntax
  * Blocks, comments, tokens
  * if, do while, for
* Variable declaration
* Basic types: int, char, bool
* References
* Pointers (can be 0)
* Functions
  * Return values
  * Call-by-value, call-by-reference
  * auto

* Debugging
* Source code management

LECTURE: OOP Basics
* Basic ideas, UML
* Class, Object/Instance, Field, Method
* Class Hierarchy, Inheritance

EXERCISES
* g++
* gdb
* git
* Introduce project
* Modelling

Day 2
-----
LECTURE: C/C++ Compilation
* Compilation
  * Declaration vs. Definition
  * Header/Source files
  * Definition guards
  * Preprocessor
  * Compilation units
  * Libraries
  * qmake/make
* Procedural C/C++ 2
  * pointers
  * scoping
  * typecasts
  * static, const
  * typedef
  * structs (unions)
  * arrays
  * ranged for
  * Dynamic data structures
    * Memory Layout: Stack vs. Heap
    * Pointer arithmetics
    * malloc, free, NULL
    * delete, new
* STL: vector, hashmap, iterator, find, sort

LECTURE: OOP in C++ 1
* Example: multidim valarray class
* Declaration vs. Definition of classes
* Constructor, Destructor
* Default constructor
* Encapsulation: private, public
* friend

EXERCISES
* Handling multidimensional arrays -> Game board
* Introduce project code
* Debug project code
* UML Design

Day 3 
-----

LECTURE 1: OOP in C++ 2
* Function overloading
* Operator overloading
* Inheritance
  * protected
* Polymorphism
  * Virtual Functions
  * Abstract Base Classes
  * Pure Virtual Functions
* Multiple Inheritance

Day 4
-----
LECTURE: More C++ 1
* Exceptions
* Namespaces

LECTURE 2: OOP in C++ 3
* Const Correctness
* Copy Constructor
* Automatic type conversion
* Inline definitions

EXERCISES

Day 5
-----
LECTURE 1: More C++ 2
* Templates
* STL

LECTURE 2: Software Development
* Software Development Models
  * Waterfall Model
  * Modern SE
    * Test Driven Programming
    * Design Patterns
    * "Agile" Development
    * Extreme Programming

Further topics
--------------
* MPI?

PROJECT
* Fearsome Floors
* Stage 1:
  * Simple Board
  * Controllable Players
  * Exercise: Implement monster
* Stage 2:
  * Implement board with given OOP design
* Stage 3:
  * AI for players, tournament


