Time-stamp: <2013-02-19 08:36 olenz>

Day 1
-----
LECTURE 1: Procedural C/C++ 1
* History of C++
* Fundamental syntax
  * Blocks, comments, tokens
  * if, do while, for
* Variable declaration
* Basic types: int, char, bool
* References
* Functions
  * Return values
  * Call-by-value, call-by-reference
  * auto

* Debugging
* Source code management

LECTURE 2: Object-oriented Design
* Basic ideas, UML
* Class, Object/Instance, Field, Method
* Class Hierarchy, Inheritance

EXERCISES
* g++
* gdb
* git
* Introduce project
* Modelling

Day 2
-----
LECTURE 1: Compilation and Data types
* Compilation
  * Declaration vs. Definition
  * Header/Source files
  * Definition guards
  * Preprocessor
  * Compilation units
  * Libraries
  * qmake/make
* Data types
  * pointers
  * scoping
  * typecasts
  * static, const
  * typedef
  * structs (unions)
  * Dynamic data structures
    * Memory Layout: Stack vs. Heap
    * Pointer arithmetics
    * malloc, free, NULL
    * delete, new
  * arrays
  * Example: linked lists

LECTURE 2: OOP in C++ 1
* Example: multidim valarray class
* Declaration vs. Definition of classes
* Constructor, Destructor
* Default constructor
* Encapsulation: private, public
* friend

Day 3 
-----
LECTURE 1: A Tour of the Standard C++ Library
* containers
* iterators
* algorithm
* functional stuff
* ...more

LECTURE 2: OOP in C++ 2
* Function overloading
* Operator overloading
* Inheritance
  * protected
* Polymorphism
  * Virtual Functions
  * Abstract Base Classes
  * Pure Virtual Functions
* Multiple Inheritance

Day 4
-----
LECTURE 1: More C++ 1
* Exceptions
* Namespaces

LECTURE 2: OOP in C++ 3
* Const Correctness
* Copy Constructor
* Automatic type conversion
* Inline definitions

Day 5
-----
LECTURE 1: More C++ 2
* Templates

LECTURE 2: Software Development
* Software Development Models
  * Waterfall Model
  * Modern SE
    * Test Driven Programming
    * Design Patterns
    * "Agile" Development
    * Extreme Programming

Further topics
--------------
PROJECT
* Fearsome Floors
* Stage 1:
  * Simple Board
  * Controllable Players
  * Exercise: Implement monster
* Stage 2:
  * Implement board with given OOP design
* Stage 3:
  * AI for players, tournament


