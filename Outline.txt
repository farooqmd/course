Time-stamp: <2014-03-17 21:19 olenz>

Day 1
-----
LECTURE 1: Using C++
* History of C++
* Fundamental syntax: Blocks, comments, tokens
* Variable declarations
* Basic types: int, float, bool
* String: an object, using an object
* if, do while, for
* Functions
* References
* Call-by-value, call-by-reference
* Scoping
* Pointers
* Compilation slides

LECTURE 2: Object-oriented Design
* Basic ideas, UML
* Class, Object/Instance, Field, Method
* Class Hierarchy, Inheritance

TUTORIAL: Compilation and Libraries
* Declaration vs. Definition
* Header/Source files
* Definition guards
* Preprocessor
* Compilation units
* Libraries
* qmake

TUTORIAL: Simple program: ZeroMQ
TUTORIAL: Project intro and modelling

Day 2
-----
LECTURE 1: A Tour of the Standard Library
* I/O-streams
  * <iostream>: cin, cout, cerr
  * <fstream>: ifstream, ofstream
  * <sstream>: istringstream, ostringstream
  * Flags: 
    * Bool: boolalpha, noboolalpha
    * Integer: dec, hex, oct
    * Float: fixed, scientific
    * Adjust: left, right
  * <iomanip>: setprecision, setw, setfill
* Using templates
* Containers
  * Example: vector
  * Ranged for loop (C++11)
  * Auto
  * Iterators
    * Generalized pointer
    * Dereference
    * Increment
    * Possibly decrement, random access
  * Iterator methods
    * begin(), end()
    * rbegin(), rend()
    * insert(), erase()
  * Container methods
    * swap()
    * push_back(), pop_back()
    * back(), front()
    * size(), resize()
  * Different containers
    * <vector>: efficient random access, resizable
    * <array>: efficient random access
    * <list>/<forward_list>: efficient insertion, deletion, iteration
    * <deque>: efficient insertion/deletion at front/end
    * <unordered_[multi]set>: efficient insertion, deletion, find
    * <[multi]set>: efficient insertion, deletion, find, ordered 
    * <unordered_[multi]map>: associative list, unordered
    * <[multi]map>: associative list, ordered
* <algorithm>
  * works on ranges of elements
  * sort
  * find
* More
  * <memory> shared_ptr / weak_ptr
  * <functional> Map, Bind
  * <chrono> Time
  * <complex> Complex numbers
  * <limits> Numerical limits
  * <tuple> Tuple objects
  * <valarray> array of numbers, with mathematical functions
  * Multi-threading

LECTURE 2: OOP in C++
* Example: multidim valarray class
* Declaration vs. Definition of classes
* Constructor, Destructor
* Default constructor
* Encapsulation: private, public
* friend

LECTURE 3: TDD in a Nutshell
* gtest
* jenkins

TUTORIAL: Git

Day 3 
-----
LECTURE 1: The Magic of Pointers
* Data types
  * Static
  * Dynamic data structures
    * Memory Layout: Stack vs. Heap
    * Pointers and arithmetics
    * Arrays
    * delete, new
  * Example: Linked lists
* Debugging

LECTURE 2: OOP: Overloading, Inheritance and Polymorphism 
* Function overloading
* Operator overloading
* Inheritance
  * protected
* Polymorphism
  * Virtual Functions
  * Abstract Base Classes
  * Pure Virtual Functions
* Multiple Inheritance

Day 4
-----
LECTURE 1: Exceptions and Namespaces

LECTURE 2: OOP in C++
* Const Correctness
* Type casting: static_cast, dynamic_cast, const_cast
* Automatic type conversion

Day 5
-----
LECTURE 1: Templates
* Implementing templates

Further topics
--------------
PROJECT
* Fearsome Floors
* Stage 1:
  * Simple Board
  * Controllable Players
  * Exercise: Implement monster
* Stage 2:
  * Implement board with given OOP design
* Stage 3:
  * AI for players, tournament


