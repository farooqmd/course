Time-stamp: <2014-03-16 16:59 olenz>

Day 1
-----
LECTURE 1: Using C++
* History of C++
* Fundamental syntax: Blocks, comments, tokens
* Variable declarations
* Basic types: int, float, bool
* String: an object, using an object
* if, do while, for
* Functions
* References
* Call-by-value, call-by-reference
* Scoping
* Pointers
* Compilation slides

LECTURE 2: Object-oriented Design
* Basic ideas, UML
* Class, Object/Instance, Field, Method
* Class Hierarchy, Inheritance

TUTORIAL: Compilation and Libraries
* Declaration vs. Definition
* Header/Source files
* Definition guards
* Preprocessor
* Compilation units
* Libraries
* qmake

TUTORIAL: Simple program: ZeroMQ
TUTORIAL: Project intro and modelling

Day 2
-----
LECTURE 1: A Tour of the Standard Library
* auto
* Using templates
* I/O-streams
* Containers
  * Data structures
    * List-like
      * Array
      * Linked list
    * Map-like
      * Binary tree
      * Hash map
    * Comparison
      * Memory requirement:
        * Array: N
        * Linked list: N+(N*ptrsize)
        * Binary tree: N+(2*N*ptrsize)
        * Hashmap: ~m*N (m~2)
      * Random access
        * Array: O(1)
        * Linked list: O(N)
        * Binary tree: O(log(N))
        * Hash map: O(1)
      * Insertion/deletion
        * Array: O(N)
        * Linked list: O(1)
        * Binary tree: O(log(N))
        * Hash map: O(1)
      * Sorted insert
        * Array: O(N)
        * Linked list: O(N)
        * Binary tree: O(log(N))
        * Hash map: NA
  * Iterators
    * Generalized pointer
    * Dereference
    * Increment
    * Possibly decrement, random access
  * Iterator methods
    * begin()
    * end()
    * insert()
    * erase()
    * rbegin()
    * rend()
  * Container methods
    * swap()
    * push_back()
    * pop_back()
    * back()
    * front()
    * size()
    * resize()
  * Algorithm
    * sort
    * find
* Functional
* ...more

LECTURE 2: OOP in C++
* Example: multidim valarray class
* Declaration vs. Definition of classes
* Constructor, Destructor
* Default constructor
* Encapsulation: private, public
* friend

LECTURE 3: TDD in a Nutshell
* gtest

TUTORIAL: Git

Day 3 
-----
LECTURE 1: The Magic of Pointers
* Data types
  * Static
  * Dynamic data structures
    * Memory Layout: Stack vs. Heap
    * Pointers and arithmetics
    * delete, new
    * Arrays
  * Example: linked lists
* Debugging

LECTURE 2: OOP: Overloading, Inheritance and Polymorphism 
* Function overloading
* Operator overloading
* Inheritance
  * protected
* Polymorphism
  * Virtual Functions
  * Abstract Base Classes
  * Pure Virtual Functions
* Multiple Inheritance

Day 4
-----
LECTURE 1: Exceptions and Namespaces

LECTURE 2: OOP in C++
* Const Correctness
* Type casting: static_cast, dynamic_cast, const_cast
* Automatic type conversion

Day 5
-----
LECTURE 1: Templates
* Implementing templates

Further topics
--------------
PROJECT
* Fearsome Floors
* Stage 1:
  * Simple Board
  * Controllable Players
  * Exercise: Implement monster
* Stage 2:
  * Implement board with given OOP design
* Stage 3:
  * AI for players, tournament


